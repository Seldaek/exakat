#!/usr/bin/env php
<?php
/*
 * Copyright 2012-2015 Damien Seguy – Exakat Ltd <contact(at)exakat.io>
 * This file is part of Exakat.
 *
 * Exakat is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Exakat is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Exakat.  If not, see <http://www.gnu.org/licenses/>.
 *
 * The latest code can be found at <http://exakat.io/>.
 *
*/

include_once(dirname(__DIR__).'/library/Autoload.php');
spl_autoload_register('Autoload::autoload_library');

$config = new \Exakat\Config(array());

use \Exakat\Graph\GraphResults;

$begin = microtime(true);
//$graphDB = new \Exakat\Graph\Tinkergraph($config);
$graphDB = new \Exakat\Graph\Gsneo4j($config);

$end = microtime(true);
print "Connect : ".number_format(($end - $begin) * 1000, 2)." ms\n";

$res = $graphDB->query('g.V().hasLabel("Project").values("fullcode")');
$project = $res[0];

$begin = microtime(true);
$query = <<<QUERY

// Extrait les méthodes qui sont redéfinies dans la classe au dessus
// Faire la même chose pour les constantes et propriétés et statiques 
// faire la liste totale des PMC d'une classe
g.V().hasLabel('Class').where( __.out('EXTENDS')).as('fille')
    .out('METHOD').as('method').out('NAME').sideEffect{ name = it.get().value('code');}
    .select('fille').out('EXTENDS').in('DEFINITION').out('METHOD').as('methodparent').out('NAME').filter{ it.get().value('code') == name}
    .select('fille', 'method', 'methodparent').by('fullcode')

// Search for static expression hierarchy with constants
g.V().hasLabel('Constant').where(__.out("VALUE").not(hasLabel("Integer", "String"))).values('fullcode')

QUERY;
//
print $query;

$res = $graphDB->query($query, [ ]);

$end = microtime(true);
print "Time : ".number_format(($end - $begin) * 1000, 2)." ms\n";

$list = array();

if ($res->isType(GraphResults::ARRAY)) {
    foreach($res as $k => $v) {
//        fputcsv($fp, $v);
        if (is_array($v)) {
            print "$k)\n";
            foreach($v as $a => $b) {
                print "  $a  =>  ".var_export($b, true)."\n";
            }
        } else {
            print "$k  =>  $v\n";
            if (preg_match('/^\$\w+$/', $v)) {
                $list[] = $v;
            }
        }
    }
} else {
    print "res => ".$res->toString().PHP_EOL;
}
?>